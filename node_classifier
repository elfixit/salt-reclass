#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# node_classifier — compute puppet external node definitions (yaml) from a data source
#
# Copyright © 2010 martin f. krafft <madduck@madduck.net>
# Released under the terms of the Artistic Licence 2.0
#
__name__ = 'node_classifier'
__description__ = 'classify nodes based on an external data source'
__version__ = '2010.07.29.2255'
__author__ = 'martin f. krafft <madduck@madduck.net>'
__copyright__ = 'Copyright © 2010 ' + __author__
__licence__ = 'Artistic Licence 2.0'

import sys, os, posix, time

from optparse import OptionParser
parser = OptionParser()
parser.prog = __name__
parser.version = __version__
parser.description = __description__
parser.usage = '%prog [options] nodename'
parser.add_option('-t', '--storage-type', dest='storage_type',
                  default='yaml_fs',
                  help='the type of storage backend to use')
parser.add_option('-n', '--node-uri', dest='node_uri',
                  help='the URI to pass to the node storage backend')
parser.add_option('-r', '--role-uri', dest='role_uri',
                  default=None,
                  help='the URI to pass to the role storage backend')
parser.add_option('-o', '--output', dest='output',
                  default='full',
                  help='the information to print (full | states | pillar)')

options, args = parser.parse_args()

if len(args) < 1:
    print >>sys.stderr, 'E: no node name given.'
    sys.exit(posix.EX_USAGE)
elif len(args) > 1:
    print >>sys.stderr, 'E: only one node name can be specified.'
    sys.exit(posix.EX_USAGE)
elif options.output not in ('full','states','pillar'):
    print >>sys.stderr, \
        'E: invalid output mode, %s not one of full, states, or pillar' % options.output
    sys.exit(posix.EX_USAGE)

options.role_uri = options.role_uri or options.node_uri

def load_storage_backend_class(storage_type):
    try:
        modname = 'storage.' + storage_type
        mod = __import__(modname, globals(), locals(), storage_type)
    except ImportError:
        return None

    return getattr(mod, 'ExternalNodeStorage', None)

backend_class = load_storage_backend_class(options.storage_type)
if backend_class is None:
    print >>sys.stderr, 'E: no such storage backend:', options.storage_type
    sys.exit(posix.EX_CONFIG)

backend = backend_class(options.node_uri, options.role_uri)
backend.load_node(args[0])

metadata = {
    'hostname'   : args[0],
    'roles'      : backend.get_roles(),
    'timestamp'  : time.strftime('%c')
}

params = backend.get_parameters()
flow_style = False

if options.output == 'full':
    nodedef = {
        'METADATA'    : metadata,
        'environment' : backend.get_environment(),
        'states'      : backend.get_states(),
        'parameters'  : params
    }
elif options.output == 'states':
    nodedef = {
        'METADATA'    : metadata,
        'environment' : backend.get_environment(),
        'classes'     : backend.get_states()
    }
    flow_style = None
elif options.output == 'pillar':
    nodedef = params
    nodedef['METADATA'] = metadata

nodedef.update(backend.get_additional_data())

from yaml import dump
try:
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Dumper

print dump(nodedef, Dumper=Dumper, default_flow_style=flow_style)

sys.exit(posix.EX_OK)
